<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Cyber Knight</title>
        <link>https://cyberknight777.dev/posts/</link>
        <description>Recent content in Posts on Cyber Knight</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Fri, 20 Jun 2025 23:14:52 +0800</lastBuildDate>
        <atom:link href="https://cyberknight777.dev/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Git - Tips and Tricks [PART 2]</title>
            <link>https://cyberknight777.dev/posts/2025/06/git-tips-and-tricks-part-2/</link>
            <pubDate>Fri, 20 Jun 2025 23:14:52 +0800</pubDate>
            
            <guid>https://cyberknight777.dev/posts/2025/06/git-tips-and-tricks-part-2/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;It has been 4 years since my last tips and tricks post for Git, thus it is time to make a part 2 expanding upon more git functionalities that are useful and should be known by the masses.&lt;/p&gt;
&lt;h3 id=&#34;getting-a-list-of-commit-hashes&#34;&gt;Getting a list of commit hashes&lt;/h3&gt;
&lt;p&gt;For example, if you have made a number of changes and you want to rebase those changes off of another branch but you&amp;rsquo;re like me and you don&amp;rsquo;t prefer to use &lt;code&gt;git rebase&lt;/code&gt;, then you may try the command below to get the list of commit hashes of the changes you&amp;rsquo;ve made.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>It has been 4 years since my last tips and tricks post for Git, thus it is time to make a part 2 expanding upon more git functionalities that are useful and should be known by the masses.</p>
<h3 id="getting-a-list-of-commit-hashes">Getting a list of commit hashes</h3>
<p>For example, if you have made a number of changes and you want to rebase those changes off of another branch but you&rsquo;re like me and you don&rsquo;t prefer to use <code>git rebase</code>, then you may try the command below to get the list of commit hashes of the changes you&rsquo;ve made.</p>
<ul>
<li>First and foremost you need two things, commit hash of the last commit you made and the commit hash of the commit BEFORE the first commit you made. Then you can proceed to do this:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git log --oneline lastcommithash...beforefirstcommithash --format<span style="color:#f92672">=</span>%H --reverse
</span></span></code></pre></div><p>Explanation: This will provide a list of commit hashes in a reversed order (as in it will show the first commit hash to the last commit hash). %H stands for full hash, you can get an abbreviated list by passing %h instead.</p>
<h3 id="rerere">Rerere</h3>
<p>Rerere is a hidden functionality in git that stands for &ldquo;reuse recorded resolution&rdquo;, which means it caches your conflict resolutions and automatically applies said resolutions when you have a similar conflict again. This is a very useful feature that specifically helps with merges.</p>
<ul>
<li>To enable it globally, all you&rsquo;d have to do is this:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git config --global rerere.enabled true
</span></span></code></pre></div><p>Explanation: This sets rerere to be enabled by default in .gitconfig.</p>
<ul>
<li>If you want to perform a massive merge but you do not want to deal with the conflicts and you have a reference repo that has already dealt with the conflicts, you can make your life easier by simply:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git clone referencerepo ref
</span></span><span style="display:flex;"><span>cd ref
</span></span><span style="display:flex;"><span>wget https://github.com/git/git/raw/master/contrib/rerere-train.sh
</span></span><span style="display:flex;"><span>chmod +x rerere-train.sh
</span></span><span style="display:flex;"><span>./rerere-train.sh
</span></span><span style="display:flex;"><span>cp -r .git/rr-cache /path/to/your/repo/.git/
</span></span></code></pre></div><p>Explanation: With this you have copied the recorded resolution cache to your repo and when you attempt to do the massive merge, it will resolve almost every similar conflict there is.</p>
<h3 id="strip-history">Strip history</h3>
<p>This is useful in the event where you need to push a repo but the commit history is too large / is LFS-bound.</p>
<ul>
<li>You can strip the history down to one commit to be able to push it by doing this:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git reset <span style="color:#66d9ef">$(</span>git commit-tree HEAD^<span style="color:#f92672">{</span>tree<span style="color:#f92672">}</span> -m <span style="color:#e6db74">&#34;stripped import&#34;</span><span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Explanation: This strips the entire commit history to one commit called stripped import.</p>
<h3 id="format-patch">Format patch</h3>
<p>Sometimes you may want to get .patch files of the commits you&rsquo;ve made, you can do that by using <code>git format-patch</code>.</p>
<ul>
<li>To get one particular commit as a .patch:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git format-patch -1 commitHash
</span></span></code></pre></div><ul>
<li>To get a list of commits as .patch files:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git format-patch commitHash
</span></span></code></pre></div><ul>
<li>To print out the list of commits to stdout:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git format-patch commitHash --stdout
</span></span></code></pre></div><p>You can extend this to save to a file by doing <code>&gt; name.patch</code>.</p>
<h3 id="stash">Stash</h3>
<p>Sometimes you&rsquo;re making some changes but you want to store it and work on something new. You can do that via <code>git stash</code>.</p>
<ul>
<li>To stash current changes:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git stash
</span></span></code></pre></div><ul>
<li>To view files of stashed changes:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git stash show
</span></span></code></pre></div><ul>
<li>To view actual stashed changes:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git stash show -p
</span></span></code></pre></div><ul>
<li>To apply stashed changes:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git stash apply
</span></span></code></pre></div><ul>
<li>To clear stashed changes:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git stash clear
</span></span></code></pre></div><h3 id="checkout">Checkout</h3>
<p>I&rsquo;m not gonna talk about the basics of checkout but I will showcase 2 cool ways to use it.</p>
<ul>
<li>To checkout a file from a different commit hash:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git checkout commitHash /path/to/file
</span></span></code></pre></div><ul>
<li>To checkout and create a new branch:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git checkout FETCH_HEAD -b newbranch
</span></span></code></pre></div><h3 id="multiple-branches-on-multiple-remotes">Multiple branches on multiple remotes</h3>
<p>Sometimes you may have a repo that is on multiple remotes, the &ldquo;easy&rdquo; way to deal with this is to have multiple copies of the repo itself. While that solution <em>works</em>, it is not ideal.</p>
<ul>
<li>You can have multiple branches of the same name of multiple remotes with differing histories by doing this:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git remote add newremote link.git
</span></span><span style="display:flex;"><span>git fetch newremote foo
</span></span><span style="display:flex;"><span>git checkout FETCH_HEAD -b foo-new
</span></span><span style="display:flex;"><span>git config push.default upstream
</span></span><span style="display:flex;"><span>git config branch.autoSetupMerge
</span></span><span style="display:flex;"><span>git commit --allow-empty -m <span style="color:#e6db74">&#34;test&#34;</span>
</span></span><span style="display:flex;"><span>git push -u newremote foo-new:foo
</span></span></code></pre></div><p>Explanation: This fetches the branch from a new remote which has the same branch name as your current remote, checks out to it and creates a new branch name and then configures push.default to push to the remote that it was pulled from i.e newremote. Then, it configures branch.autoSetupMerge for git to acknowledge that git pull will pull from the remote that it was originally pulled from instead of origin. Finally, it sets up the remote for the new branch name to push to the upstream branch name to not create a new branch unnecessarily.</p>
<h3 id="large-file-storage-lfs">Large File Storage (LFS)</h3>
<p>Dealing with LFS blobs in repos can be a tad bit tedious and confusing. I will showcase some commands that are useful in this case.</p>
<ul>
<li>To setup LFS in your repo:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git lfs install
</span></span><span style="display:flex;"><span>git lfs track /path/to/largefile
</span></span></code></pre></div><p>Explanation: This installs global hooks for LFS and tracks the large file in a .gitattributes file in the repo.</p>
<ul>
<li>To find what file is a largefile that prevents pushing normally, you need the blob id to do this:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git ls-tree -r HEAD | grep $BLOB_ID
</span></span></code></pre></div><p>Explanation: This shows you the exact largefile for you to track via LFS.</p>
<ul>
<li>To check all largefiles and to get the blob id you can do this:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git lfs ls-files
</span></span></code></pre></div><h3 id="rm">Rm</h3>
<p>Sometimes you may want to remove a file and commit it, usually you would <code>rm /path/to/file &amp;&amp; git add /path/to/file</code>, but you can simply use <code>git rm</code>.</p>
<p>There is no need to showcase how it works as it is merely the same as regular rm except it stages the files/directories that you have removed.</p>
<h3 id="reflog">Reflog</h3>
<p>In some cases, after rewriting history by rebasing, you may want to check your previous HEAD as to what exactly the list of commits in there had.</p>
<ul>
<li>You can check the history of what you have amended, rebased and dropped, edited and so on by doing this:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git reflog
</span></span></code></pre></div><h3 id="regular-expression-with-git">Regular Expression with git</h3>
<p>Sometimes you may want to perform a regex on multiple files on a repo.</p>
<ul>
<li>You can perform a regex with an iteration of this:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git grep -l foo | xargs sed -i <span style="color:#e6db74">&#39;s/foo/bar/g&#39;</span>
</span></span></code></pre></div><p>Explanation: This will grep through the repository for the word foo and list the filenames including the path to it and then pipe it to sed to perform a regular expression.</p>
<h2 id="conclusion">Conclusion</h2>
<p>For the moment, this is more than enough for a part 2, perhaps I would work on a part 3 someday in the near future.</p>
]]></content>
        </item>
        
        <item>
            <title>Git - Tips and Tricks [PART 1]</title>
            <link>https://cyberknight777.dev/posts/2021/09/git-tips-and-tricks-part-1/</link>
            <pubDate>Sun, 19 Sep 2021 21:38:28 +0800</pubDate>
            
            <guid>https://cyberknight777.dev/posts/2021/09/git-tips-and-tricks-part-1/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://git-scm.com&#34;&gt;Git&lt;/a&gt;&lt;/strong&gt; is a very useful utility. There are alot of ways to do one particular thing. This post is made to share what I know and use in git. Bear in mind, I won&amp;rsquo;t be touching the basics as if you&amp;rsquo;re reading this post, I assume that you know the basics of git.&lt;/p&gt;
&lt;h3 id=&#34;making-commits&#34;&gt;Making commits&lt;/h3&gt;
&lt;p&gt;It is wise for one to make proper commit history for their project. A proper commit history provides clarity onto what is the progress of the project while makes it easier to find bugs if any. You can make any kind of explanatory commits but my personal preference is the format &amp;ldquo;prefix: what you have changed&amp;rdquo; with an optional explanation. Prefix would be the file and/or directory name that you have modified.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p><strong><a href="https://git-scm.com">Git</a></strong> is a very useful utility. There are alot of ways to do one particular thing. This post is made to share what I know and use in git. Bear in mind, I won&rsquo;t be touching the basics as if you&rsquo;re reading this post, I assume that you know the basics of git.</p>
<h3 id="making-commits">Making commits</h3>
<p>It is wise for one to make proper commit history for their project. A proper commit history provides clarity onto what is the progress of the project while makes it easier to find bugs if any. You can make any kind of explanatory commits but my personal preference is the format &ldquo;prefix: what you have changed&rdquo; with an optional explanation. Prefix would be the file and/or directory name that you have modified.</p>
<ul>
<li>Let&rsquo;s say you&rsquo;ve made a commit but there&rsquo;s a typo in the commit message, what you can do is use the <code>--amend</code> option in git. The syntax goes as below:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git commit --amend -m <span style="color:#e6db74">&#34;new commit message&#34;</span>
</span></span></code></pre></div><ul>
<li>Next, let&rsquo;s say you would want to add a co-author to your commit, here&rsquo;s how one would do it:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;your commit message&#34;</span> -m <span style="color:#e6db74">&#34;Co-authored-by: name &lt;name@mail.com&gt;&#34;</span>
</span></span></code></pre></div><ul>
<li>Maybe you are using someone else&rsquo;s work and you do want to add author, the best way for this would be to use the <code>--author</code> option. Here&rsquo;s how it goes:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;your commit message&#34;</span> --author <span style="color:#e6db74">&#34;name &lt;name@mail.com&gt;&#34;</span>
</span></span></code></pre></div><h3 id="fixing-commit-history">Fixing commit history</h3>
<ul>
<li>Let&rsquo;s say you&rsquo;ve made some bad commits and would like to erase it, I&rsquo;d suggest resetting hard and force pushing. Get the commit hash of the commit before the messed up commits and run this command:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git reset --hard commitHash
</span></span></code></pre></div><ul>
<li>Then you can either make proper commits and/or force push by this:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git push -f
</span></span></code></pre></div><ul>
<li>You can also squash your commits and force push. With the commit hash of the commit before the messed up commits, run this command:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git rebase -i commitHash
</span></span></code></pre></div><ul>
<li>Then you probably would end up in vim(in my case that&rsquo;s my preferred editor for git). In vim, you can do this:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:%<span style="color:#a6e22e">s</span><span style="color:#e6db74">/pick/</span><span style="color:#a6e22e">squash</span>/<span style="color:#a6e22e">g</span>
</span></span></code></pre></div><ul>
<li>
<p>If you&rsquo;re using any other editor, find out if there&rsquo;s any regex features in your editor or just manually swap it to squash.</p>
</li>
<li>
<p>Then replace the first squash with pick and save.</p>
</li>
<li>
<p>Then you&rsquo;ll come to the commit message screen, I&rsquo;d suggest adding a <em>[SQUASH]: what you&rsquo;ve changed</em> for better clarity.</p>
</li>
<li>
<p>Save it and exit. Then you&rsquo;re done.</p>
</li>
</ul>
<h3 id="checking-commit-history">Checking commit history</h3>
<p>You can check your commit history with git too. There&rsquo;s a choice for you to either look at a specific commit content or the entire repository&rsquo;s commit history or even both at the same time.</p>
<ul>
<li>For looking at the commit history in general you can do this:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git log
</span></span></code></pre></div><ul>
<li>For looking at the commit history in a oneliner you can do this:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git log --oneline
</span></span></code></pre></div><ul>
<li>For looking at the commit history and the content of each commits:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git log -p
</span></span></code></pre></div><ul>
<li>For looking at the commit content of a specific commit:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git show commitHash
</span></span></code></pre></div><h3 id="picking-commits-from-other-repositories">Picking commits from other repositories</h3>
<p>You can pick commmits from other repositories in several ways. You can either fetch the repository and pick it or wget the commit as a patch and apply it with <code>git am</code>.</p>
<ul>
<li>To fetch the repository and pick a couple of commits, first fetch the repo and then grab the commit hash of the commit before the HEAD of the commit you wanna pick and the commit hash before the first commit you would want to pick. Here&rsquo;s how it goes:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git fetch https://linktorepo.com branch
</span></span><span style="display:flex;"><span>git cherry-pick startHash^...endHash
</span></span></code></pre></div><ul>
<li>To pick one commit from a repository, you&rsquo;ll need to wget it as a patch, I&rsquo;m sure most Git repository hosting services have the option to download commits as patches. So here&rsquo;s how it&rsquo;d go:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>wget https://linktopatch.com/xyz.patch
</span></span><span style="display:flex;"><span>git am xyz.patch
</span></span></code></pre></div><h3 id="merging-branchestags">Merging branches/tags</h3>
<p>You can merge branches or tags from other repositories by either fetching and merging them or directly merging them. In my opinion, there&rsquo;s hardly any difference between fetching and merging vs directly merging them.</p>
<ul>
<li>To merge a branch/tag of a specific repository by fetching and merging it:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git fetch https://linktorepo.com branch/tag
</span></span><span style="display:flex;"><span>git merge FETCH_HEAD
</span></span></code></pre></div><ul>
<li>To merge a branch/tag of a specific repository by directly merging it:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git pull https://linktorepo.com branch/tag
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>At this point, I believe I can write more but it would be better to split it into a 2nd post. Hope this post helped and stay tuned for the 2nd post :)</p>
]]></content>
        </item>
        
        <item>
            <title>In the making: SpamProtection-rs</title>
            <link>https://cyberknight777.dev/posts/2021/09/in-the-making-spamprotection-rs/</link>
            <pubDate>Fri, 17 Sep 2021 14:36:09 +0800</pubDate>
            
            <guid>https://cyberknight777.dev/posts/2021/09/in-the-making-spamprotection-rs/</guid>
            <description>&lt;p&gt;It all started 3 months ago when &lt;a href=&#34;https://github.com/intellivoid&#34;&gt;Intellivoid&lt;/a&gt; released their Go wrapper for the &lt;a href=&#34;https://github.com/intellivoid/intellivoid.spamprotection-go&#34;&gt;SpamProtection API&lt;/a&gt;. Since I&amp;rsquo;m a Rustacean, I intended to make a Rust wrapper for the SpamProtection API. I knew for a fact that this wasn&amp;rsquo;t a one-man job, So I pinged &lt;a href=&#34;https://github.com/perosar&#34;&gt;Pero&lt;/a&gt; regarding this and he was interested in it too.&lt;/p&gt;
&lt;p&gt;Then, Intellivoid server faced a data corruption in which all their services went down for about 2 months. There was no progress in that 2 months. After 2 months, their services slowly started coming up and then at one point the API got up. What we did is that we started development of spb-rs. We initially made the request to the api via reqwest but we didn&amp;rsquo;t parse the JSON output. So Pero came with an idea to parse the JSON by declaring structs.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>It all started 3 months ago when <a href="https://github.com/intellivoid">Intellivoid</a> released their Go wrapper for the <a href="https://github.com/intellivoid/intellivoid.spamprotection-go">SpamProtection API</a>. Since I&rsquo;m a Rustacean, I intended to make a Rust wrapper for the SpamProtection API. I knew for a fact that this wasn&rsquo;t a one-man job, So I pinged <a href="https://github.com/perosar">Pero</a> regarding this and he was interested in it too.</p>
<p>Then, Intellivoid server faced a data corruption in which all their services went down for about 2 months. There was no progress in that 2 months. After 2 months, their services slowly started coming up and then at one point the API got up. What we did is that we started development of spb-rs. We initially made the request to the api via reqwest but we didn&rsquo;t parse the JSON output. So Pero came with an idea to parse the JSON by declaring structs.</p>
<p>Pero made the initial base of the code with structs and all and pushed it to our <a href="https://github.com/cyberknight777/spamprotection-rs">repo</a>. Then I started declaring more methods and structs for ease of use. We worked on it for about 2 days straight till we got it stable and working.</p>
<p>Then we publicised the repo and we started getting suggestions from people. Some suggested that we should use convenience methods for faster output. Some suggested we rewrite the whole repetition of using the User variable again and again. We worked on all the suggestions and then I spoke to <a href="https://github.com/netkas">Netkas</a> regarding SpamProtection-rs. I wanted to make this project an official product of Intellivoid.</p>
<p>Netkas explained of what we could do with the project, and I agreed with it. Now SpamProtection-rs is an official product of Intellivoid. We&rsquo;ve shifted the repo to the official org on github. Here&rsquo;s the new link to our project: <a href="https://github.com/intellivoid/spamprotection-rust">SpamProtection-rs</a> We will improve more on SPB-rs soon, stay tuned!</p>
]]></content>
        </item>
        
        <item>
            <title>How to Rebase a Kernel</title>
            <link>https://cyberknight777.dev/posts/2021/09/how-to-rebase-a-kernel/</link>
            <pubDate>Mon, 06 Sep 2021 02:50:39 +0800</pubDate>
            
            <guid>https://cyberknight777.dev/posts/2021/09/how-to-rebase-a-kernel/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Well, I was feeling bored so I was chatting with a dude called &lt;a href=&#34;https://t.me/anuragroy&#34;&gt;Anurag&lt;/a&gt; in a group called &lt;a href=&#34;https://t.me/de_wm&#34;&gt;DEs/WMs&lt;/a&gt; regarding android kernels then he told me how his kernel was underperforming even after ricing it alot. I suggested him to rebase his kernel and he said he was unclear about the mentioned topic, so I wrote a long message onto how one can rebase a kernel and I thought that I should write it as a post in my site. So here I am writing this small guide at 04:30 in the morning.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Well, I was feeling bored so I was chatting with a dude called <a href="https://t.me/anuragroy">Anurag</a> in a group called <a href="https://t.me/de_wm">DEs/WMs</a> regarding android kernels then he told me how his kernel was underperforming even after ricing it alot. I suggested him to rebase his kernel and he said he was unclear about the mentioned topic, so I wrote a long message onto how one can rebase a kernel and I thought that I should write it as a post in my site. So here I am writing this small guide at 04:30 in the morning.</p>
<h2 id="what-is-rebasing-a-kernel">What is rebasing a kernel</h2>
<p>When you&rsquo;re doing android kernel development, you must&rsquo;ve heard the term <strong>rebase</strong> like a thousand times. What rebase actually means is that you will be using a kernel release from either <strong><a href="https://android.googlesource.com/kernel/common.git">Android Common Kernel(ACK)</a></strong> or <strong><a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git">Linux Kernel Stable(LKS)</a></strong> or even <strong><a href="https://source.codeaurora.org/quic/la/kernel/common">Code Aurora Forum(CAF)</a></strong> and then importing your OEM changes on top of it, then just start ricing your kernel :).</p>
<h2 id="why-do-we-need-to-rebase-a-kernel">Why do we need to rebase a kernel</h2>
<p>You probably should rebase every once in awhile as when you start ricing your kernel, there may be times when your commit history is not managed and completely mismatched. This can actually make life harder for you when you would want to debug an issue in your kernel. Rebasing your kernel gives you clarity onto what may have caused the issue at hand. The next part of this blog will focus onto how one can rebase a kernel.</p>
<h2 id="how-to-rebase-a-kernel">How to rebase a kernel</h2>
<p>Prerequisites needed :-</p>
<pre><code>* Knowledge of git
* Knowledge of C
* Common sense
</code></pre>
<h3 id="using-the-right-base">Using the right base</h3>
<p>This heavily depends on the brand of <strong><a href="https://en.wikipedia.org/wiki/System_on_a_chip">System On a Chip(SOC)</a></strong> you are using in your phone. Let&rsquo;s say you&rsquo;re using a Qualcomm SOC based phone, the best choice would be to use a CAF tag release as a base and work forward with it. You could also use LKS or ACK but the most preferable option would be to use a CAF tag release. Let&rsquo;s say you&rsquo;re using a Mediatek or Exynos SOC based phone, the best choice would be to use an ACK release as a base and work with it. The reason I suggest ACK over LKS is because ACK focuses more on android side of things compared to LKS which is basically generic.</p>
<h3 id="importing-oem-changes">Importing OEM changes</h3>
<p><strong>Remember, If your OEM kernel source is a Q base, use a Q base kernel from CAF or ACK. Do not use a R base kernel for Q based OEM kernel as it would not work and would throw alot of git conflicts!</strong></p>
<p>Let&rsquo;s say your OEM releases their kernel source code in <a href="https://github.com">GitHub</a>, the easiest way you can import their changes would be to merge their kernel source. This is an example of how a OnePlus 7 kernel source code for R can be merged on a CAF base.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git fetch https://github.com/oneplusoss/android_kernel_oneplus_sm8150 oneplus/SM8150_R_10.0
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>git merge FETCH_HEAD
</span></span></code></pre></div><p>Then of course, you&rsquo;ll have some git conflicts in which you should have the knowledge to compare and fix it.</p>
<p><strong>Keep in mind there are some OEMs that release some important drivers in a seperate repository so merge them like I do below for my audio driver.</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git fetch https://github.com/OnePlusOSS/android_vendor_qcom_opensource_audio_kernel_sm8150 oneplus/SM8150_R_10.0
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>git merge -s ours --no-commit --allow-unrelated-histories --squash FETCH_HEAD
</span></span></code></pre></div><p>Once that is done, you can start building your kernel and fixing mismerges if any. There is an alternative way to import oem changes manually with better commit history. You can read more about it <strong><a href="https://t.me/LinuxKernelNewbies/183745">here</a></strong>.</p>
<p>Let&rsquo;s say your OEM releases their kernel source as a tarball like Samsung does, what you can do is manually copy pasting each directories from the tarball onto the kernel base, or add the patch that I will be sharing below in the Makefile of the OEM kernel source, rename the OEM kernel source as <code>oem</code>, place it inside of the kernel base and run <code>make ARCH=arm64</code>.</p>
<pre tabindex="0"><code class="language-git" data-lang="git">diff --git a/Makefile b/Makefile
index 4c3b137a7000..d588668d76a8 100644
--- a/Makefile
+++ b/Makefile
@@ -127,6 +127,7 @@ $(CURDIR)/Makefile Makefile: ;
 ifneq ($(words $(subst :, ,$(CURDIR))), 1)
   $(error main directory cannot contain spaces nor colons)
 endif
+KBUILD_COPY :=  $(shell cp -rf $(CURDIR)/../oem/* $(CURDIR)/../)
 
 ifneq ($(KBUILD_OUTPUT),)
 # check that the output directory actually exists
</code></pre><p><strong>Be sure to remove this after importing OEM changes or you may have your kernel source being copied to ../ everytime.</strong></p>
<p>Once you&rsquo;re done with that, you can start building your kernel and ricing your kernel.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Rebasing a kernel or you can call it as bringing up a kernel is actually a simple yet fun process. Since you&rsquo;re doing this on your own, you get to choose what you need and what you don&rsquo;t need for the kernel. By this, you can manage to make a simple yet perfect kernel for yourself. My first ever proper bringup of a kernel is <strong><a href="https://github.com/cyberknight777/dragonheart_kernel_oneplus_sm8150">DragonHeart</a></strong>. It was fun to do that bringup and I&rsquo;m still learning many new things as I progress with it.</p>
<hr>
<p>I hope maybe you as the reader has gained useful information from this post.</p>
<p>Stay tuned for more of how-to posts from me :)</p>
]]></content>
        </item>
        
        <item>
            <title>My First Post</title>
            <link>https://cyberknight777.dev/posts/2021/09/my-first-post/</link>
            <pubDate>Fri, 03 Sep 2021 01:22:03 +0800</pubDate>
            
            <guid>https://cyberknight777.dev/posts/2021/09/my-first-post/</guid>
            <description>&lt;h1 id=&#34;hiya&#34;&gt;Hiya&lt;/h1&gt;
&lt;h3 id=&#34;welcome-to-my-first-post&#34;&gt;Welcome to my first post&lt;/h3&gt;
&lt;p&gt;This site was generated using Hugo.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h1 id="hiya">Hiya</h1>
<h3 id="welcome-to-my-first-post">Welcome to my first post</h3>
<p>This site was generated using Hugo.</p>
]]></content>
        </item>
        
    </channel>
</rss>
